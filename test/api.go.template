package apis

import (
"github.com/gin-gonic/gin"
"github.com/gin-gonic/gin/binding"
"go-admin/models"
"go-admin/pkg"
"go-admin/utils"
"net/http"
)

// @Summary configuration list data
// @Description get JSON
// @Tags configuration
// @Param configKey query string false "configKey"
// @Param configName query string false "configName"
// @Param configType query string false "configType"
// @Param pageSize query int false "Number of pages"
// @Param pageIndex query int false "page number"
// @Success 200 {object} models.Response "{"code": 200, "data": [...]}"
// @Router /api/v1/configList [get]
// @Security
func Get{{.ClassName}}List(c *gin.Context) {
	var data models.{{.ClassName}}
	var err error
	var pageSize = 10
	var pageIndex = 1

	if size := c.Request.FormValue("pageSize"); size != "" {
	pageSize = pkg.StrToInt(err, size)
	}

	if index := c.Request.FormValue("pageIndex"); index != "" {
		pageIndex = pkg.StrToInt(err, index)
	}

	{{ range .Columns -}}
	{{$z := .IsQuery}}
	{{- if ($z) -}}
	data.{{.GoField}} = c.Request.FormValue("{{.JsonField}}")
	{{ end }}
	{{- end -}}

	data.DataScope = utils.GetUserIdStr(c)
	result, count, err := data.GetPage(pageSize, pageIndex)
	pkg.HasError(err, "", -1)

	var mp = make(map[string]interface{}, 3)
	mp["list"] = result
	mp["count"] = count
	mp["pageIndex"] = pageIndex
	mp["pageIndex"] = pageSize

	var res models.Response
	res.Data = mp

	c.JSON(http.StatusOK, res.ReturnOK())
}

// @Summary get configuration
// @Description get JSON
// @Tags configuration
// @Param configId path int true "configuration encoding"
// @Success 200 {object} models.Response "{"code": 200, "data": [...]}"
// @Router /api/v1/config/{configId} [get]
// @Security
func Get{{.ClassName}}(c *gin.Context) {
	var data models.{{.ClassName}}
	data.{{.PkGoField}}, _ = utils.StringToInt(c.Param("{{.PkJsonField}}"))
	result, err := data.Get()
    pkg.HasError(err, "Sorry no relevant information was found", -1)

	var res models.Response
	res.Data = result

	c.JSON(http.StatusOK, res.ReturnOK())
}

// @Summary add configuration
// @Description get JSON
// @Tags configuration
// @Accept  application/json
// @Product application/json
// @Param data body models.{{.ClassName}} true "data"
// @Success 200 {string} string "{"code": 200, "message": "Add success"}"
// @Success 200 {string} string "{"code": -1, "message": "Add failed"}"
// @Router /api/v1/dict/data [post]
// @Security Bearer
func Insert{{.ClassName}}(c *gin.Context) {
	var data models.{{.ClassName}}
	err := c.BindWith(&data, binding.JSON)
	data.CreateBy = utils.GetUserIdStr(c)
	pkg.HasError(err, "", 500)
	result, err := data.Create()
	pkg.HasError(err, "", -1)

	var res models.Response
	res.Data = result
	c.JSON(http.StatusOK, res.ReturnOK())

}

func Update{{.ClassName}}(c *gin.Context) {
	var data models.{{.ClassName}}
	err := c.BindWith(&data, binding.JSON)
    pkg.HasError(err, "Data analysis failed", -1)
	data.UpdateBy = utils.GetUserIdStr(c)
	result, err := data.Update(data.{{.PkGoField}})
	pkg.HasError(err, "", -1)

	var res models.Response
	res.Data = result
	c.JSON(http.StatusOK, res.ReturnOK())
}

func Delete{{.ClassName}}(c *gin.Context) {
	var data models.{{.ClassName}}
	id, err := utils.StringToInt(c.Param("{{.PkJsonField}}"))
	data.UpdateBy = utils.GetUserIdStr(c)
	_, err = data.Delete(id)
    pkg.HasError(err, "Modify failed", 500)

	var res models.Response
    res.Msg = "Successfully deleted"
	c.JSON(http.StatusOK, res.ReturnOK())
}